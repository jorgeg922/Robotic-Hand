{
  "name": "random-signal",
  "version": "0.0.2",
  "description": "Generate a pseudo-random signal stream for mocking Sensor data",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bpostlethwaite/random-signal.git"
  },
  "keywords": [
    "random",
    "signal",
    "stream",
    "timeseries",
    "maker",
    "sensor"
  ],
  "author": {
    "name": "Ben Postlethwaite"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/bpostlethwaite/random-signal/issues"
  },
  "homepage": "https://github.com/bpostlethwaite/random-signal",
  "dependencies": {
    "readable-stream": "~1.0.26"
  },
  "readme": "random-signal\n=============\n\nGenerate a pseudo-random signal for mocking Sensor data\n\n``` javascript\nvar RandomSignal = require(\"../.\")\n\nvar opt = {\n  sep: \"\\n\"     // seperator\n, tdelta: 200   // milliseconds\n}\n\nvar rs = RandomSignal(opt)\n\nrs.pipe(process.stdout)\n\nsetTimeout( function () {\n  rs.destroy()\n}, 1000)\n\n```\noutputs\n\n```shell\n{\"x\":\"2014-02-26 16:30:57.918\",\"y\":1.3151883383869654}\n{\"x\":\"2014-02-26 16:30:58.123\",\"y\":4.24176480313184}\n{\"x\":\"2014-02-26 16:30:58.328\",\"y\":3.719194025237043}\n{\"x\":\"2014-02-26 16:30:58.529\",\"y\":3.7442073803567077}\n```\n\n## Options\nAlong with Readable stream options, (including object mode) you may pass in these options or use the defaults given below\n\n```javascript\n  var tdelta = opt.tdelta || 50\n    , hz = opt.hz || (1 / 20 * tdelta)\n    , amp = opt.amp || 1\n    , noiseHz = opt.noiseHz || 4 * hz\n    , noiseAmp = opt.noiseAmp || 0.3 * amp\n    , trendIV = opt.trendIV || (1000 * 1/hz)\n    , lowtrend = opt.lowtrend || -amp\n    , hightrend = opt.hightrend || amp\n    , sep = opt.sep || \"\"\n    , timeFormatter = opt.timeFormatter || getTimeString\n```\n\n### tdelta (milliseconds)\nThe millisecond time that data will be produced. The default is `50ms`.\n\n### hz (seconds)\nThe frequency of the underlying sine signal. The default frequency for the sine wave is 1 cycle per 20 `tdelta`'s. This means that each cycle is fairly well sampled. It also means that setting `tdelta = 50` will result in a default of a cycle per second.\n\n### amp\nThe amplitude of the underlying sine signal.\n\n### noizeHz (seconds)\nThe frequency of the applied noise signal\n\n### noiseAmp\nThe amplitude of the noise which will be randomly generated between 0 and `noiseAmp`\n\n### trendIV (milliseconds)\nThe millisecond interval in which to apply a random trend constant to the output data. The default is `1000 * 1/hz` which provides a new trend every cycle of the underlying sine wave. If you want a longer trend, say applied every 5 cycles, set `trendIV = 5000 * 1/hz`. Remember the trendIV is in milliseconds, so the `1000` multiplication is necessary.\n\n### hightrend\nThe maximum amplitude of the randomly applied constant trend. The default is `1`.\n\n### lowtrend\nThe minimum amplitude of the randomly applied constant trend. The default is `-1`.\n\n### sep\nIf the stream is not configured in objectMode this seperator will be applied to the end of the `utf8` encoded string `buffer`. The default is set to empty string `\"\"`.\n\n### timeFormatter\nA function that takes a Javascript `Date` object as inputs and outputs a formatted date string. The default `getTimeString` function will output dates as `\"YYYY-MM-SS HH:MM:SS.f\"`\n\n\n## Install\n```bash\nnpm install random-signal\n```\n",
  "readmeFilename": "README.md",
  "_id": "random-signal@0.0.2",
  "dist": {
    "shasum": "61419e93888b8e4278617c150190ab0a12639267"
  },
  "_from": "random-signal@0.0.2",
  "_resolved": "https://registry.npmjs.org/random-signal/-/random-signal-0.0.2.tgz"
}
